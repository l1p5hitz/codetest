<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.90"/>
    <errors>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ComLength&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ComLength&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="UART_OS.c" line="578"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="UART_OS.c" line="582"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;checksum&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;checksum&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="UART_OS.c" line="1356"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;iloop&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;iloop&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="UART_OS.c" line="1361"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i">
            <location file="UART_OS.c" line="1113"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;rx&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;rx&amp;#039; is assigned a value that is never used.">
            <location file="UART_OS.c" line="2124"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from float * to unsigned int * is not portable due to different binary data representations on different platforms." verbose="Casting from float * to unsigned int * is not portable due to different binary data representations on different platforms.">
            <location file="UART_OS.c" line="542"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;wifiState==3&amp;#039; is always true" verbose="Condition &amp;#039;wifiState==3&amp;#039; is always true">
            <location file="app_main.c" line="979" info="Condition &amp;#039;wifiState==3&amp;#039; is always true"/>
            <location file="app_main.c" line="977" info="Assuming that condition &amp;#039;wifiState!=3&amp;#039; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msg_id&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msg_id&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="app_main.c" line="929"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: msg_id" verbose="Unused variable: msg_id">
            <location file="app_main.c" line="212"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;newbuffer&amp;#039; is always true" verbose="Condition &amp;#039;newbuffer&amp;#039; is always true">
            <location file="cJSON.c" line="468" info="Condition &amp;#039;newbuffer&amp;#039; is always true"/>
            <location file="cJSON.c" line="460" info="Assuming that condition &amp;#039;!newbuffer&amp;#039; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;(d*0)!=0&amp;#039; is always false" verbose="Condition &amp;#039;(d*0)!=0&amp;#039; is always false">
            <location file="cJSON.c" line="510"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;length&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;length&amp;#039; is assigned a value that is never used.">
            <location file="cJSON.c" line="1458"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;i&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;i&amp;#039; shadows outer variable">
            <location file="fwdl.c" line="144" info="Shadow variable"/>
            <location file="fwdl.c" line="99" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;i&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;i&amp;#039; shadows outer variable">
            <location file="fwdl.c" line="157" info="Shadow variable"/>
            <location file="fwdl.c" line="99" info="Shadowed declaration"/>
        </error>
    </errors>
</results>
